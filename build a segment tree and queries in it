void build(int *seg,int arr[],int index,int low,int high)
{
    if(low==high)
    {
        seg[index]=arr[low];
        return ;
    }
    int mid =low +(high-low)/2;
    build(seg,arr,2*index+1,low,mid);
    build(seg,arr,2*index+2,mid+1,high);
    seg[index]=min(seg[2*index+1],seg[2*index+2]);
}

int query(int *st,int index,int low,int high,int a,int b)
{
    if(low>=a and high<=b) return st[index];
    if(low>b or high<a)return INT_MAX;
    int mid = low + (high-low)/2;
    int left=query(st,2*index+1,low,mid,a,b);
    int right=query(st,2*index+2,mid+1,high,a,b);
    
    return min(left,right);
}
int *constructST(int arr[],int n)
{
    int *seg = new int[4*n];
    build(seg,arr,0,0,n-1);
    return seg;
}
/* The functions returns the
 min element in the range
 from a and b */
int RMQ(int st[] , int n, int a, int b)
{
   return query(st,0,0,n-1,a,b);
//Your code here
}
